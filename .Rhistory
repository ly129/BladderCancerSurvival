progression <- read.csv("../Bladder/Enhanced_AdvUrothelial_Progression.csv")
progression$LastClinicNoteDate <- as.Date(progression$LastClinicNoteDate)
progression$ProgressionDate <- as.Date(progression$ProgressionDate)
line1 <- subset(lineoftherapy, LineNumber == 1, select = c(PatientID, StartDate))
names(line1)[2] <- "Line1StartDate"
line1 <- aggregate(Line1StartDate ~ PatientID, data = line1, FUN = min)
auc <- subset(eauc, select = -c(DiseaseGrade, TStage, NStage, MStage, SurgeryType))
auc <- merge(auc, line1, all.x = TRUE, by = "PatientID")
auc <- subset(auc, subset = Line1StartDate >= as.Date("2011-01-01") &
Line1StartDate <= as.Date("2023-09-30"))
unique.therapy <- unique(lineoftherapy$LineName)
csd <- unique.therapy[grep("Clinical", unique.therapy)]
ptid.csd <- unique(subset(lineoftherapy, LineName %in% csd)$PatientID)
auc <- subset(auc, !PatientID %in% ptid.csd)
auc <- merge(auc, mortality, by = "PatientID", all.x = TRUE)
visit <- subset(visit, select = c(PatientID, VisitDate))
oral <- subset(oral, select = c(PatientID, StartDate))
drugepi <- subset(drugepisode, select = c(PatientID, EpisodeDate))
progressiondate <- subset(progression, select = c(PatientID, LastClinicNoteDate))
advdiagnosis <- subset(auc, select = c(PatientID, Line1StartDate))
names(visit)[2] <- names(oral)[2] <- names(drugepi)[2] <- names(progressiondate)[2] <- names(advdiagnosis)[2] <- "LastDate"
censoring.date <- rbind(visit, oral, drugepi, progressiondate, advdiagnosis)
censoring.date <- aggregate(LastDate ~ PatientID, data = censoring.date, FUN = max)
# auc <- merge(auc, visit, by = "PatientID", all.x = TRUE)
auc <- merge(auc, censoring.date, by = "PatientID", all.x = TRUE)
# head(auc)
auc$Death <- !is.na(auc$DateOfDeath)
# auc$CensoringDate <- auc$DateOfDeath
# auc$CensoringDate[!auc$Death] <- auc$LastDate[!auc$Death]
auc$CensoringDate <- as.Date(ifelse(is.na(auc$DateOfDeath), auc$LastDate, auc$DateOfDeath))
auc$Line1StartPeriod <- ifelse(auc$Line1StartDate < as.Date("2016-05-18"),
"Before ICI", ifelse(auc$Line1StartDate > as.Date("2019-12-18"),
"After ADC",
"Between ICI & ADC"))
auc$Line1StartPeriod <- factor(auc$Line1StartPeriod, levels = c("Before ICI", "Between ICI & ADC", "After ADC"))
auc.surv <- with(auc,
Surv(time = as.integer(CensoringDate - Line1StartDate),
event = Death))
fit1 <- survfit(auc.surv ~ Line1StartPeriod, data = auc)
ggsurvplot(fit = fit1,
data = auc,
# xlim = c(0, 1000),
break.time.by = 365.25,
xscale = "d_y",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Years",
censor = FALSE, fontsize = 3)
print(fit1)
# print(fit1, rmean = 365)
# print(fit1, rmean = 365 * 2)
summary(fit1, times = 1095)
summary(fit1, times = 730)
names.ici <- c("pembrolizumab", "avelumab", "atezolizumab", "nivolumab", "durvalumab")
names.adc <- c("vedotin-ejfv", "sacituzumab govitecan-hziy")
Names.ici <- c("Pembrolizumab", "Avelumab", "Atezolizumab", "Nivolumab", "Durvalumab")
Names.adc <- c("Enfortumab Vedotin-Ejfv", "Sacituzumab Govitecan-Hziy")
lot.ici <- subset(lineoftherapy, PatientID %in% auc$PatientID & LineNumber == 1 & StartDate > as.Date("2016-05-18"))
lot.ici <- subset(lot.ici, apply(sapply(Names.ici, grepl, lot.ici$LineName), 1, any))
ici.startdate <- aggregate(StartDate ~ PatientID, data = lot.ici, FUN = min)
ici.enddate <- aggregate(EndDate ~ PatientID, data = lot.ici, FUN = max)
ici.start.end <- merge(ici.startdate, ici.enddate)
ici.start.end <- merge(ici.start.end, subset(auc, select = c(PatientID, Death, CensoringDate)), all.x = TRUE)
# Number of patients that died before the proposed start date of first-line ICI
# sum(ici.start.end$StartDate > ici.start.end$CensoringDate & ici.start.end$Death == TRUE)
death.before.ici <- which(ici.start.end$StartDate > ici.start.end$CensoringDate & ici.start.end$Death == TRUE)
ici.start.end <- ici.start.end[-death.before.ici, ]
ici.start.end$ici.duration <- as.integer(ici.start.end$EndDate - ici.start.end$StartDate)
summary(ici.start.end$ici.duration)
hist(ici.start.end$ici.duration/365.25,
main = "Distribution of duration of ICI use",
xlab = "Years", breaks = 0:10,
xaxt = "n")
axis(1, at = 0:10, labels = 0:10)
table(ici.start.end$ici.duration >= 365.25 * 2)
prop.test(table(!ici.start.end$ici.duration >= 365.25 * 2))
progression.ici <- subset(progression, PatientID %in% ici.start.end$PatientID,
select = c(PatientID, ProgressionDate))
progression.ici <- progression.ici[complete.cases(progression.ici), ]
death.ici <- subset(mortality, PatientID %in% ici.start.end$PatientID)
ici.start.end$ProgressionDeathDate <- NA
for ( i in 1:nrow(ici.start.end)) {
start <- ici.start.end$StartDate[i]
end <- ici.start.end$EndDate[i]
id <- ici.start.end$PatientID[i]
prog <- sort(progression.ici[progression.ici$PatientID == id, "ProgressionDate"],
decreasing = FALSE)
prog.date <- prog[prog > start]
if (length(prog) > 0) {
prog.date <- min(prog.date)
# prog.int <- as.integer(prog - start) %/% 60
} else {
prog.date <- NA
# ici.start.end$ProgressionDate[i] <- NA
}
if (ici.start.end$Death[i]) {
death.date <- ici.start.end$CensoringDate[i]
# death.int <- as.integer(ici.start.end$CensoringDate[i] - start) %/% 60
} else {
death.date <- NA
}
prog.death.date <- as.Date(min(prog.date, death.date, na.rm = TRUE))
ici.start.end$ProgressionDeathDate[i] <- as.Date(prog.death.date)
ici.start.end$ProgressionDeathInterval[i] <- as.integer(prog.death.date - start) %/% 60
disc.int <- as.integer(end - start) %/% 60
# if (ici.start.end$CensoringDate[i] <= end + 7) {
#   discont <- FALSE
# } else {
#   discont <- TRUE
#   disc.int <- as.integer(end - start) %/% 60
# }
ici.start.end$Discontinuation[i] <- disc.int
# ici.start.end$Flag_disc <- discont
}
ici.start.end$ProgressionDeathDate <- as.Date(ici.start.end$ProgressionDeathDate)
Interval <- paste0(0:17 * 2, "-", 0:17 * 2 + 2)
prog.dead.flag <- ici.start.end$ProgressionDeathInterval <= ici.start.end$Discontinuation
n.prog.dead <- ici.start.end$ProgressionDeathInterval[prog.dead.flag]
disc.flag <- ici.start.end$ProgressionDeathInterval > ici.start.end$Discontinuation | is.na(ici.start.end$ProgressionDeathInterval)
n.start <- table(pmin(ici.start.end$ProgressionDeathInterval, ici.start.end$Discontinuation, na.rm = TRUE))
disc.tab <- data.frame(Interval, No.Start = NA, No.Disc = NA, No.Prog_Dead = NA)
n.disc <- ici.start.end$Discontinuation[disc.flag]
disc.tab$No.Prog_Dead <- table(n.prog.dead)[1:18]
disc.tab$No.Disc <- table(n.disc)[1:18]
disc.tab$No.Start <- cumsum(n.start[length(n.start):1])[length(n.start):1][1:18]
disc.tab
ici.start.end$ProgressionDeathDate <- NA
for ( i in 1:nrow(ici.start.end)) {
start <- ici.start.end$StartDate[i]
end <- ici.start.end$EndDate[i]
id <- ici.start.end$PatientID[i]
prog <- sort(progression.ici[progression.ici$PatientID == id, "ProgressionDate"],
decreasing = FALSE)
prog.date <- prog[prog > start]
if (length(prog) > 0) {
prog.date <- min(prog.date)
# prog.int <- as.integer(prog - start) %/% 60
} else {
prog.date <- NA
# ici.start.end$ProgressionDate[i] <- NA
}
if (ici.start.end$Death[i]) {
death.date <- ici.start.end$CensoringDate[i]
# death.int <- as.integer(ici.start.end$CensoringDate[i] - start) %/% 60
} else {
death.date <- NA
}
prog.death.date <- as.Date(min(prog.date, death.date, na.rm = TRUE))
ici.start.end$ProgressionDeathDate[i] <- as.Date(prog.death.date)
ici.start.end$ProgressionDeathInterval[i] <- as.integer(prog.death.date - start) %/% 90
disc.int <- as.integer(end - start) %/% 90
# if (ici.start.end$CensoringDate[i] <= end + 7) {
#   discont <- FALSE
# } else {
#   discont <- TRUE
#   disc.int <- as.integer(end - start) %/% 60
# }
ici.start.end$Discontinuation[i] <- disc.int
# ici.start.end$Flag_disc <- discont
}
ici.start.end$ProgressionDeathDate <- as.Date(ici.start.end$ProgressionDeathDate)
Interval <- paste0(0:11 * 3, "-", 0:11 * 3 + 3)
prog.dead.flag <- ici.start.end$ProgressionDeathInterval <= ici.start.end$Discontinuation
n.prog.dead <- ici.start.end$ProgressionDeathInterval[prog.dead.flag]
disc.flag <- ici.start.end$ProgressionDeathInterval > ici.start.end$Discontinuation | is.na(ici.start.end$ProgressionDeathInterval)
n.start <- table(pmin(ici.start.end$ProgressionDeathInterval, ici.start.end$Discontinuation, na.rm = TRUE))
disc.tab <- data.frame(Interval, No.Start = NA, No.Disc = NA, No.Prog_Dead = NA)
n.disc <- ici.start.end$Discontinuation[disc.flag]
disc.tab$No.Prog_Dead <- table(n.prog.dead)[1:12]
disc.tab$No.Disc <- table(n.disc)[1:12]
disc.tab$No.Start <- cumsum(n.start[length(n.start):1])[length(n.start):1][1:12]
disc.tab
# ici.2yr <- subset(ici.start.end, ici.duration > 365.25 * 2)
#
# progression.ici <- subset(progression, PatientID %in% ici.2yr$PatientID,
#                           select = c(PatientID, ProgressionDate))
# progression.ici <- progression.ici[complete.cases(progression.ici), ]
# death.ici <- subset(mortality, PatientID %in% ici.2yr$PatientID)
#
# ici.2yr$Discont <- TRUE
#
# ici.2yr$Discont <- ifelse(ici.2yr$CensoringDate <= ici.2yr$EndDate + 7, FALSE, TRUE)
#
# for ( i in 1:nrow(ici.2yr)) {
#   end <- ici.2yr$EndDate[i]
#   end3m <- end + 90
#
#   id <- ici.2yr$PatientID[i]
#   prog <- progression.ici[progression.ici$PatientID == id, "ProgressionDate"]
#   mort <- death.ici[death.ici$PatientID == id, "DateOfDeath"]
#   prog.mort.dates <- c(prog, mort)
#
#   if (!is.null(prog.mort.dates)) {
#     if (any(prog.mort.dates > end & prog.mort.dates < end3m)) {
#       ici.2yr$Discont[i] <- FALSE
#     }
#   }
# }
#
# table(ici.2yr$Discont)
# prop.test(table(!ici.2yr$Discont))
demographics <- read.csv("../Bladder/Demographics.csv")
for (i in 1:nrow(demographics)) {
if (demographics$State[i] == "") {
demographics$Location[i] <- NA
} else if (demographics$State[i] %in% c('CT','MA','ME','NH','RI','VT','NY','NJ','PA')) {
demographics$Location[i] <- "Northeast"
} else if (demographics$State[i] %in% c('DC','DE','FL','GA','MD','NC','SC','VA','WV','AL','KY','MS','TN','AR','OK','LA','TX')) {
demographics$Location[i] <- "South"
} else if (demographics$State[i] %in% c('IA','KS','MN','MO','ND','NE','SD','IL','IN','MI','OH','WI')) {
demographics$Location[i] <- "Midwest"
} else if (demographics$State[i] %in% c('AZ','CO','ID','MT','NM','NV','UT','WY','AK','CA','HI','OR','WA')) {
demographics$Location[i] <- "West"
}
if (demographics$Race[i] == "") {
demographics$Race[i] <- NA
} else if (demographics$Race[i] %in% c("Hispanic or Latino", "Asian")) {
demographics$Race[i] <- "Other Race"
}
if (demographics$BirthSex[i] == "") {
demographics$BirthSex[i] <- NA
}
if (demographics$Ethnicity[i] == "") {
demographics$Ethnicity[i] <- NA
}
}
demo <- subset(demographics, select = c("PatientID", "BirthYear", "BirthSex", "Race", "Location"))
auc <- merge(auc, demo, all.x = TRUE)
auc$AdvancedDiagnosisYear <- as.integer(format(auc$AdvancedDiagnosisDate,"%Y"))
auc$DiagnosisYear <- as.integer(format(auc$DiagnosisDate,"%Y"))
auc$Line1Year <- as.integer(format(auc$Line1StartDate,"%Y"))
auc$AgeAtAdvancedDiagnosis <- auc$AdvancedDiagnosisYear - auc$BirthYear
auc$AgeAtDiagnosis <- auc$DiagnosisYear - auc$BirthYear
auc$AgeAtLine1 <- auc$Line1Year - auc$BirthYear
auc$StageAtDiagnosis <- NA
for (i in 1:nrow(auc)) {
if (auc$GroupStage[i] %in% c("Stage 0a", "Stage 0is")) auc$StageAtDiagnosis[i] <- "Stage0"
if (auc$GroupStage[i] %in% c("Stage I")) auc$StageAtDiagnosis[i] <- "Stage1"
if (auc$GroupStage[i] %in% c("Stage II")) auc$StageAtDiagnosis[i] <- "Stage2"
if (auc$GroupStage[i] %in% c("Stage III", "Stage IIIA", "Stage IIIB")) auc$StageAtDiagnosis[i] <- "Stage3"
if (auc$GroupStage[i] %in% c("Stage IV", "Stage IVA", "Stage IVB")) auc$StageAtDiagnosis[i] <- "Stage4"
}
auc$StageAtDiagnosis <- factor(auc$StageAtDiagnosis)
auc <- subset(auc, select = -GroupStage)
auc$SmokingHistory <- NA
auc$SmokingHistory <- ifelse(auc$SmokingStatus == "History of smoking", TRUE, FALSE)
auc <- subset(auc, select = -SmokingStatus)
practice <- read.csv("../Bladder/Practice.csv")
prac <- aggregate(PracticeType~ PatientID,
data = practice,
FUN = function(x) {
ifelse(length(unique(x)) == 2, "ACADEMIC", x)
})
auc <- merge(auc, prac,, by = "PatientID", all.x = TRUE)
ecog <- read.csv("../Bladder/ECOG.csv")
ecog$EcogDate <- as.Date(ecog$EcogDate)
ecog.unique <- aggregate(EcogValue ~ PatientID + EcogDate, data = ecog, FUN = max)
# auc <- auc |>
#   left_join(ecog.unique, join_by(PatientID == PatientID, closest(Line1StartDate > EcogDate)))
# auc <- auc[, -(ncol(auc) - 1)]
# names(auc)[ncol(auc)] <- "EcogValueAtAdvancedDiagnosis"
#
# auc$EcogValueAtAdvancedDiagnosis <- ifelse(auc$EcogValueAtAdvancedDiagnosis < 2, "<2", ">= 2")
# auc <- auc |>
#   left_join(ecog.unique, join_by(PatientID == PatientID, closest(DiagnosisDate > EcogDate)))
# auc <- auc[, -(ncol(auc) - 1)]
# names(auc)[ncol(auc)] <- "EcogValueAtDiagnosis"
#
auc <- auc |>
left_join(ecog.unique, join_by(PatientID == PatientID, closest(Line1StartDate > EcogDate)))
auc <- auc[, -(ncol(auc) - 1)]
names(auc)[ncol(auc)] <- "EcogValueAtLine1"
auc$EcogValueAtLine1 <- ifelse(auc$EcogValueAtLine1 < 2, "< 2", ">= 2")
auc$EcogValueAtLine1 <- as.factor(auc$EcogValueAtLine1)
insurance <- read.csv("../Bladder/Insurance.csv")
insurance$StartDate <- as.Date(insurance$StartDate)
insurance$EndDate <- as.Date(insurance$EndDate)
ins <- insurance[, c("PatientID", "PayerCategory", "StartDate")]
ins$Insurance <- ifelse(ins$PayerCategory %in% c("Medicaid", "Medicare", "Other Government Program"),
"Government",
ifelse(ins$PayerCategory %in% c("Commercial Health Plan"), "Commercial", "Other"))
ins$Insurance <- factor(ins$Insurance, levels = c("Government", "Commercial", "Other"))
ins <- subset(ins, select = -PayerCategory)
# multiple insurance with the same start date
ins <- unique(ins)
ins <- aggregate(Insurance ~ PatientID + StartDate,
data = ins,
FUN = function(x) {names(which.max(table(x)))})
auc <- auc |>
left_join(select(ins, c(PatientID, StartDate, Insurance)),
join_by(PatientID == PatientID, closest(Line1StartDate > StartDate)))
auc$BirthSex <- as.factor(auc$BirthSex)
auc$Race <- as.factor(auc$Race)
auc$Location <- as.factor(auc$Location)
auc$Insurance <- as.factor(auc$Insurance)
auc$PracticeType <- as.factor(auc$PracticeType)
auc$PrimarySite <- as.factor(auc$PrimarySite)
# library(table1)
#
# pvalue <- function(x, ...) {
#   # Construct vectors of data y, and groups (strata) g
#   y <- unlist(x)
#   g <- factor(rep(1:length(x), times=sapply(x, length)))
#   if (is.numeric(y)) {
#     # For numeric variables, perform a standard 2-sample t-test
#     p <- summary(aov(y ~ g))[[1]]$`Pr(>F)`[1]
#   } else {
#     # For categorical variables, perform a chi-squared test of independence
#     p <- chisq.test(table(y, g))$p.value
#   }
#   # Format the p-value, using an HTML entity for the less-than sign.
#   # The initial empty string places the output on the line below the variable label.
#   c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
# }
#
# table1(~ BirthSex + Race + StageAtDiagnosis +
#          AgeAtLine1 +
#          EcogValueAtLine1 +
#          SmokingHistory + Location + Insurance + PracticeType + PrimarySite | Line1StartPeriod,
#        # data = subset(dd, Line1StartPeriod %in% c("Before ICI", "After ADC")),
#        data = auc,
#        overall = FALSE,
#        extra.col = list(`P-value` = pvalue))
library(tableone)
# auctab <- auc[auc$Line1StartPeriod != "After ADC", ]
# auctab$Line1StartPeriod <- as.character(auctab$Line1StartPeriod)
aucsvy <- survey::svydesign(ids = ~0, data = auc)
tab1 <- CreateTableOne(vars = c("AgeAtLine1" ,
"BirthSex" ,
"Race" ,
"StageAtDiagnosis" ,
"EcogValueAtLine1" ,
"SmokingHistory" , "Location" ,
"Insurance" , "PracticeType" , "PrimarySite"),
strata = "Line1StartPeriod", data = auc, smd = TRUE, test = FALSE)
print(tab1, smd = TRUE, showAllLevels = TRUE)
write.csv(print(tab1, smd = TRUE, showAllLevels = TRUE), file = "crudetable1.csv")
library(mice)
library(twang)
library(MatchThem)
library(cobalt)
covs1 <- subset(auc,
select = c(BirthSex, Race, StageAtDiagnosis,
AgeAtLine1,
EcogValueAtLine1,
SmokingHistory, Location, Insurance,
PracticeType, PrimarySite,
Line1StartPeriod,
Line1StartDate, CensoringDate, Death))
covs1$SmokingHistory <- as.integer(covs1$SmokingHistory)
imp1 <- mice(covs1, m = 1, maxit = 0)
predmat1 <- imp1$predictorMatrix
imp1.method <- imp1$method
# imp.method["DiagnosisDate"] <- ""
# CensoringDate and Line1StartDate excluded from imputation model
predmat1[, "Line1StartDate"] <- 0
predmat1[, "CensoringDate"] <- 0
imp1 <- mice(covs1,
m = 10,
predictorMatrix = predmat1,
method = imp1.method,
printFlag = FALSE)
library(adjustedCurves)
library(survival)
set.seed(42)
# simulate some example data
sim_dat <- sim_confounded_surv(n=50, max_t=1.2)
sim_dat$group <- as.factor(sim_dat$group)
# treatment assignment model
glm_mod <- glm(group ~ x2 + x3 + x5 + x6, data=sim_dat, family="binomial")
# outcome model
cox_mod <- coxph(Surv(time, event) ~ x1 + x2 + x4 + x5 + group,
data=sim_dat, x=TRUE)
if (requireNamespace("riskRegression")) {
# using direct adjustment with asymptotic confidence intervals
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="direct",
outcome_model=cox_mod,
conf_int=TRUE,
bootstrap=FALSE)
# using IPTW Kaplan-Meier with asymptotic confidence intervals
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="iptw_km",
treatment_model=glm_mod,
conf_int=TRUE,
bootstrap=FALSE)
# using AIPTW with asymptotic confidence intervals
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="aiptw",
outcome_model=cox_mod,
treatment_model=glm_mod,
conf_int=TRUE,
bootstrap=FALSE)
# using direct adjustment at custom points in time
custom_times <- c(0.001, 0.1, 0.2, 0.6, 1.1)
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="direct",
outcome_model=cox_mod,
conf_int=TRUE,
bootstrap=FALSE,
times=custom_times)
# using bootstrapping with direct adjustment
# NOTE: n_boot should be much higher than 10 in reality, only used
#       here as a fast example
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="direct",
outcome_model=cox_mod,
conf_int=TRUE,
bootstrap=TRUE,
n_boot=10)
}
# not run because those are too slow
if (requireNamespace("riskRegression")) {
# using bootstrapping with direct adjustment, run in parallel
# on two cores
adjsurv <- adjustedsurv(data=sim_dat,
variable="group",
ev_time="time",
event="event",
method="direct",
outcome_model=cox_mod,
conf_int=TRUE,
bootstrap=TRUE,
n_boot=4,
n_cores=2)
}
# using multiple imputation
if (requireNamespace("mice") & requireNamespace("WeightIt")) {
library(mice)
library(WeightIt)
# simulate some data as example
sim_dat <- sim_confounded_surv(n=50, max_t=1.2)
sim_dat$group <- as.factor(sim_dat$group)
# introduce random missingness in x1 as example
# NOTE: This is only done as an example, in reality you would
#       already have missing data, not introduce it yourself.
sim_dat$x1 <- ifelse(runif(n=50) < 0.5, sim_dat$x1, NA)
# perform multiple imputation
mids <- mice::mice(data=sim_dat, method="pmm", m=2, printFlag=FALSE)
# IPTW KM using WeightIt on imputed data
adj <- adjustedsurv(data=mids,
variable="group",
ev_time="time",
event="event",
method="iptw_km",
treatment_model=group ~ x1 + x2 + x5 + x6,
weight_method="ps", conf_int = TRUE)
plot(adj)
}
# More specific examples can be found in the documentation of each
# respective surv_method. See ?surv_ + "method" for more information.
[Package adjustedCurves version 0.11.2 Index]
# IPTW KM using WeightIt on imputed data
adj <- adjustedsurv(data=mids,
variable="group",
ev_time="time",
event="event",
method="iptw_km",
treatment_model=group ~ x1 + x2 + x5 + x6,
weight_method="ps", conf_int = TRUE)
plot(adj)
# IPTW KM using WeightIt on imputed data
adj <- adjustedsurv(data=mids,
variable="group",
ev_time="time",
event="event",
method="iptw_km",
treatment_model=group ~ x1 + x2 + x5 + x6,
# weight_method="ps",
conf_int = TRUE)
plot(adj)
# IPTW KM using WeightIt on imputed data
adj <- adjustedsurv(data=mids,
variable="group",
ev_time="time",
event="event",
# method="iptw_km",
treatment_model=group ~ x1 + x2 + x5 + x6,
# weight_method="ps",
conf_int = TRUE)
# IPTW KM using WeightIt on imputed data
adj <- adjustedsurv(data=mids,
variable="group",
ev_time="time",
event="event",
method="direct",
treatment_model=group ~ x1 + x2 + x5 + x6,
# weight_method="ps",
conf_int = TRUE)
mids
