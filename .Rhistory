if (any(drugcategory.tmp == "chemotherapy")) {
dd$Chemotherapy[i] <- TRUE
}
if (any(drugname.tmp %in% c("pembrolizumab", "avelumab", "atezolizumab", "nivolumab", "durvalumab"))) {
dd$Immunotherapy[i] <- TRUE
}
if (any(drugname.tmp %in% c("enfortumab vedotin-ejfv", "sacituzumab govitecan-hziy"))) {
dd$AntibodyConjugate[i] <- TRUE
}
}
# # sdoh
# source("sdoh.R")
# dd <- merge(dd, sdoh, all.x = TRUE)
#
# # biomarker (fgfr, pdl1 mutation)
# source("biomarker.R")
# bm <- subset(biomarker, PatientID %in% dd$PatientID)
# bm <- subset(bm, !BiomarkerStatus %in% c("No interpretation given in report",
#                                          "Unknown",
#                                          "Unsuccessful/indeterminate test",
#                                          "Results pending",
#                                          "PD-L1 equivocal"))
# pdl1 <- subset(bm, BiomarkerName == "PDL1")
# fgfr <- subset(bm, BiomarkerName == "FGFR")
#
# pdl1$PDL1 <- ifelse(pdl1$BiomarkerStatus == "PD-L1 positive", TRUE, FALSE)
# fgfr$FGFR <- ifelse(fgfr$BiomarkerStatus == "Positive", TRUE, FALSE)
#
# ## multiple records for some patients
# ## if there are both positive and negative, set to positive
# ## interpretation: ever positive during followup
# pdl1.unique <- unique(pdl1$PatientID)
# for (pt in pdl1.unique) {
#   pdl1.tmp <- subset(pdl1, PatientID == pt)
#   results <- pdl1.tmp$PDL1
#   if (length(unique(results)) != 1) pdl1[pdl1$PatientID == pt, "PDL1"] <- TRUE
# }
# pdl1 <- pdl1[, c("PatientID", "PDL1")]
#
# fgfr.unique <- unique(fgfr$PatientID)
# for (pt in fgfr.unique) {
#   fgfr.tmp <- subset(fgfr, PatientID == pt)
#   results <- fgfr.tmp$FGFR
#   if (length(unique(results)) != 1) fgfr[fgfr$PatientID == pt, "FGFR"] <- TRUE
# }
# fgfr <- fgfr[, c("PatientID", "FGFR")]
#
# pdl1 <- pdl1[!duplicated(pdl1), ]
# fgfr <- fgfr[!duplicated(fgfr), ]
#
# dd <- merge(dd, pdl1, all.x = TRUE)
# dd <- merge(dd, fgfr, all.x = TRUE)
# # comorbidity needs attention
# # Elixhauser comorbidity
# source("diagnosis.R")
#
# # use baseline comorbidity (before advanced diagnosis date) and remove urothelial cancer
# # dx <- subset(diagnosis, DiagnosisCodeSystem == "ICD-10-CM")
# # dx <- subset(dx, PatientID %in% ptid)
# # dx <- subset(dx, !is.na(dx$DiagnosisDate))
# #
# # icd10.all <- unique(dx$DiagnosisCode)
# # icd10.cancer <- icd10.all[regexpr("C", icd10.all) == 1]
# # icd10.uc <- c(icd10.cancer[grep("C67", icd10.cancer)],
# #               icd10.cancer[grep("C65", icd10.cancer)],
# #               icd10.cancer[grep("C66", icd10.cancer)],
# #               "C68.0")
# # dx <- subset(dx, !DiagnosisCode %in% icd10.uc)
# #
# # dx.before.index <- logical(nrow(dx))
# # for (i in 1:nrow(dx)) {
# #   row.tmp <- dx[i, ]
# #   adv.dx.date <- subset(dd, PatientID == row.tmp$PatientID)$AdvancedDiagnosisDate
# #   if (row.tmp$DiagnosisDate < adv.dx.date) {
# #     dx.before.index[i] <- TRUE
# #   } else {
# #     dx.before.index[i] <- FALSE
# #   }
# # }
# # dx <- dx[dx.before.index, ]
#
# dx <- diagnosis %>%
#   inner_join(dd, by = "PatientID") %>%
#   filter(DiagnosisDate <= AdvancedDiagnosisDate)
#
# icd10.all <- unique(dx$DiagnosisCode)
# icd10.cancer <- icd10.all[regexpr("C", icd10.all) == 1]
# icd10.uc <- c(icd10.cancer[grep("C67", icd10.cancer)],
#               icd10.cancer[grep("C65", icd10.cancer)],
#               icd10.cancer[grep("C66", icd10.cancer)],
#               "C68.0")
# dx <- subset(dx, !DiagnosisCode %in% icd10.uc)
#
# library(comorbidity)
#
# icd10 <- dx[, c("PatientID", "DiagnosisCode")]
# icd10 <- icd10[complete.cases(icd10), ]
#
# icd10$DiagnosisCode <- gsub("\\.", "", icd10$DiagnosisCode)
#
# elix <- comorbidity(icd10,
#                     "PatientID",
#                     "DiagnosisCode",
#                     map = "elixhauser_icd10_quan",
#                     assign0 = TRUE)
# elix.score <- score(elix, assign0 = TRUE)
# elix.score <- data.frame(PatientID = elix$PatientID, Elixhauser = elix.score)
#
# # # then use ICD9 for chose with missingness
# # icd9 <- subset(diagnosis, DiagnosisCodeSystem == "ICD-9-CM")
# #
# # icd9 <- icd9[, c("PatientID", "DiagnosisCode")]
# # icd9 <- icd9[complete.cases(icd9), ]
# #
# # icd9$DiagnosisCode <- gsub("\\.", "", icd9$DiagnosisCode)
# #
# # elix <- comorbidity(icd9,
# #                     "PatientID",
# #                     "DiagnosisCode",
# #                     map = "elixhauser_icd9_quan",
# #                     assign0 = TRUE)
# # elix.score.9 <- score(elix, assign0 = TRUE)
# #
# # elix.score.9 <- data.frame(PatientID = elix$PatientID, Elixhauser = elix.score.9)
# #
# # use9 <- setdiff(elix.score.9$PatientID, elix.score.10$PatientID)
# #
# # elix.score <- rbind(elix.score.10,
# #                     subset(elix.score.9, PatientID %in% use9))
#
#
# dd <- merge(dd, elix.score, all.x = TRUE)
# # end of comorbidity
# # add lines of treatment received
# lot <- subset(lineoftherapy, PatientID %in% ptid)
# no.lines <- aggregate(LineNumber ~ PatientID, FUN = max, data = lot)
# dd <- merge(dd, no.lines, all.x = TRUE)
# add ecog at diagnosis
source("ecog.R")
# multiple ecog value on the same day for some patients
ecog.unique <- aggregate(EcogValue ~ PatientID + EcogDate, data = ecog, FUN = max)
dd <- dd |>
left_join(ecog.unique, join_by(PatientID == PatientID, closest(AdvancedDiagnosisDate > EcogDate))) # %>%
# Filter the rows where the diagnosis date is within the insurance coverage period
# filter(EcogDate < AdvancedDiagnosisDate)
# add insurance at diagnosis
# last one prior to advanced diagnosis date
source("insurance.R")
# multiple insurance on the same day for some patients
ins <- insurance[, c("PatientID", "PayerCategory", "StartDate")]
ins$Insurance <- ifelse(ins$PayerCategory %in% c("Medicaid", "Medicare", "Other Government Program"),
"Government",
ifelse(ins$PayerCategory %in% c("Commercial Health Plan"), "Commercial", "Other"))
ins$Insurance <- factor(ins$Insurance, levels = c("Government", "Commercial", "Other"))
ins <- subset(ins, select = -PayerCategory)
# multiple insurance with the same start date
ins <- unique(ins)
ins <- aggregate(Insurance ~ PatientID + StartDate,
data = ins,
FUN = function(x) {names(which.max(table(x)))})
dd <- dd |>
left_join(select(ins, c(PatientID, StartDate, Insurance)),
join_by(PatientID == PatientID, closest(AdvancedDiagnosisDate > StartDate)))
summary(dd)
dd$Insurance <- factor(dd$Insurance)
# table 1
library(table1)
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- summary(aov(y ~ g))[[1]]$`Pr(>F)`[1]
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis + EcogValue +
SmokingHistory + Location + Insurance + PracticeType + PrimarySite +
Surgery + PDL1 + FGFR + Elixhauser +
Chemotherapy + Immunotherapy + AntibodyConjugate +
SESIndex2015_2019 | DiagnosisPeriod,
# data = subset(dd, DiagnosisPeriod %in% c("Before ICI", "After ADC")),
data = dd,
overall = FALSE,
extra.col = list(`P-value` = pvalue))
table1(~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis + EcogValue +
SmokingHistory + Location + Insurance + PracticeType + PrimarySite +
Surgery + # PDL1 + FGFR + Elixhauser +
Chemotherapy + Immunotherapy + AntibodyConjugate +
SESIndex2015_2019 | DiagnosisPeriod,
# data = subset(dd, DiagnosisPeriod %in% c("Before ICI", "After ADC")),
data = dd,
overall = FALSE,
extra.col = list(`P-value` = pvalue))
table1(~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis + EcogValue +
SmokingHistory + Location + Insurance + PracticeType + PrimarySite +
Surgery + # PDL1 + FGFR + Elixhauser +
Chemotherapy + Immunotherapy + AntibodyConjugate +
| DiagnosisPeriod,
table1(~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis + EcogValue +
SmokingHistory + Location + Insurance + PracticeType + PrimarySite +
Surgery + # PDL1 + FGFR + Elixhauser +
Chemotherapy + Immunotherapy + AntibodyConjugate| DiagnosisPeriod,
# data = subset(dd, DiagnosisPeriod %in% c("Before ICI", "After ADC")),
data = dd,
overall = FALSE,
extra.col = list(`P-value` = pvalue))
library(mice)
library(twang)
covs <- subset(dd,
select = c(Gender, Race, StageAtDiagnosis, AgeAtDiagnosis, EcogValue,
SmokingHistory, Location, Insurance, PracticeType, PrimarySite,
Surgery, Chemotherapy, Immunotherapy, AntibodyConjugate, OtherDrug,
AdvancedDiagnosisYear, DiagnosisPeriod, AdvancedDiagnosisDate,
# SESIndex2015_2019, PDL1, FGFR, Elixhauser,
DeathCensorDate, Death))
covs <- subset(dd,
select = c(Gender, Race, StageAtDiagnosis, AgeAtDiagnosis, EcogValue,
SmokingHistory, Location, Insurance, PracticeType, PrimarySite,
Surgery, Chemotherapy, Immunotherapy, AntibodyConjugate,
AdvancedDiagnosisYear, DiagnosisPeriod, AdvancedDiagnosisDate,
# SESIndex2015_2019, PDL1, FGFR, Elixhauser,
DeathCensorDate, Death))
covs$Surgery <- as.integer(covs$Surgery)
covs$Chemotherapy <- as.integer(covs$Chemotherapy)
covs$Immunotherapy <- as.integer(covs$Immunotherapy)
covs$AntibodyConjugate <- as.integer(covs$AntibodyConjugate)
covs$SmokingHistory <- as.integer(covs$SmokingHistory)
covs$AdvancedDiagnosisYear <- as.factor(covs$AdvancedDiagnosisYear)
# no imputation, missing is a category
# only includes baseline characteristics
# twang also tries to balance missing proportion
ipw <- mnps(DiagnosisPeriod ~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis +
EcogValue + SmokingHistory + Location + Insurance + PracticeType +
PrimarySite,
data = covs,
stop.method = "es.max",
n.trees = 5000)
ipw <- mnps(DiagnosisPeriod ~ Gender + Race + StageAtDiagnosis + AgeAtDiagnosis +
EcogValue + SmokingHistory + Location + Insurance + PracticeType +
PrimarySite,
data = covs,
stop.method = "es.max",
n.trees = 10000)
plot(ipw, 1)
plot(ipw, 2)
plot(ipw, 3)
wts <- get.weights(ipw)
tab <- cobalt::bal.tab(ipw, stats = "mean.diffs", thresholds = c(m = .1), un = TRUE)
cobalt::bal.plot(ipw, var.name = "AgeAtDiagnosis", which = "both")
cobalt::bal.plot(ipw, var.name = "StageAtDiagnosis", which = "both")
cobalt::love.plot(ipw)
cobalt::love.plot(ipw, thresholds = 0.1)
surv.dd <- with(dd, Surv(time = as.numeric(DeathCensorDate - AdvancedDiagnosisDate),
event = Death))
library(survival)
library(ggplot2)
library(survminer)
surv.dd <- with(dd, Surv(time = as.numeric(DeathCensorDate - AdvancedDiagnosisDate),
event = Death))
fit1 <- survfit(surv.dd ~ 1, weights = wts)
# plot(fit1)
ggsurvplot(fit1,
data = dd,
conf.int = TRUE,
surv.median.line = c("hv"),
risk.table = TRUE,
break.time.by = 90,
xlim = c(0, 1000),
ggtheme = theme_light(),
risk.table.y.text.col = TRUE, # colour risk table text annotations.
risk.table.y.text = FALSE,
xlab = "Time in Days")
fit2 <- survfit(surv.dd ~ dd$DiagnosisPeriod, weights = wts)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
# risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
# risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
# risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
# ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
# risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
tables.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
# surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
# palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
)
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
# palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
plot(fit2, col = c("red", "green", "blue"))
plot(fit2, col = c("red", "green", "blue"), xlim = c(0, 1000))
plot(fit2, col = c("red", "green", "blue"), xlim = c(0, 1000))
dd$DiagnosisPeriod <- as.character(dd$DiagnosisPeriod)
surv.dd <- with(dd, Surv(time = as.numeric(DeathCensorDate - AdvancedDiagnosisDate),
event = Death))
fit1 <- survfit(surv.dd ~ 1, weights = wts)
# plot(fit1)
ggsurvplot(fit1,
data = dd,
conf.int = TRUE,
surv.median.line = c("hv"),
risk.table = TRUE,
break.time.by = 90,
xlim = c(0, 1000),
ggtheme = theme_light(),
risk.table.y.text.col = TRUE, # colour risk table text annotations.
risk.table.y.text = FALSE,
xlab = "Time in Days")
fit2 <- survfit(surv.dd ~ dd$DiagnosisPeriod, weights = wts)
plot(fit2, col = c("red", "green", "blue"), xlim = c(0, 1000))
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
# palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
ggsurvplot(fit = fit2,
data = dd,
xlim = c(0, 1000),
break.time.by = 90,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
# linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF", "red"),
risk.table.y.text = FALSE,
xlab = "Time in Days")
